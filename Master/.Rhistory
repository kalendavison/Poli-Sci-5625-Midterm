bty = "n")
View(newhamp)
text(x = .45, y = 2500, labels = "Hanover", cex = .5)
text(x = .4, y = 2800, labels = "Hanover", cex = 1, col="red")
text(x = .42, y = 2620, labels = "Hanover", cex = .75, col="red")
text(x = .44, y = 2620, labels = "Hanover", cex = .75, col="red")
plot(x=newhamp$Dean, y=newhamp$Obama, xlab= "Proportion of Voters for Howard Dean", ylab= "Number of Votes for Barack Obama", main="Votes for Obama versus Dean,\nand The Effect of Voting Systems", xlim=c(0,.6), ylim = c(0, 3000), type="n")
points(x=newhamp$Dean[newhamp$votesys=="H"], y=newhamp$Obama[newhamp$votesys=="H"], col="blue", pch=4)
points(x=newhamp$Dean[newhamp$votesys=="D"], y=newhamp$Obama[newhamp$votesys=="D"], col="red", pch=17)
legend("topleft", legend = c("Counted by Hand", "Counted by Machine"),
pch = c(4, 17),
col = c("blue", "red"),
cex = 1,
bty = "n")
text(x = .44, y = 2620, labels = "Hanover", cex = .75, col="red")
pdf("ObamaversusDean.pdf")
plot(x=newhamp$Dean, y=newhamp$Obama, xlab= "Proportion of Voters for Howard Dean", ylab= "Number of Votes for Barack Obama", main="Votes for Obama versus Dean,\nand The Effect of Voting Systems", xlim=c(0,.6), ylim = c(0, 3000), type="n")
points(x=newhamp$Dean[newhamp$votesys=="H"], y=newhamp$Obama[newhamp$votesys=="H"], col="blue", pch=4)
points(x=newhamp$Dean[newhamp$votesys=="D"], y=newhamp$Obama[newhamp$votesys=="D"], col="red", pch=17)
legend("topleft", legend = c("Counted by Hand", "Counted by Machine"),
pch = c(4, 17),
col = c("blue", "red"),
cex = 1,
bty = "n")
text(x = .44, y = 2620, labels = "Hanover", cex = .75, col="red")
dev.off()
input <- c(rnorm(100, 80, 10))
method <- function(input){
temp <- as.numeric(substr(input, 1, 1))
temp.table <- as.data.frame(table(temp))
freq <- temp.table$Freq/sum(temp.table$Freq)
out <- numeric()
for(j in 1:length(levels(temp.table$temp))){
for(i in 1:9){
if(as.numeric(levels(temp.table$temp)[j])==i){
out[i] <- freq[j] - log10(1+1/i)
}
}
}
return(max(out))
}
method(input)
input <- c(rnorm(100, 80, 10))
method <- function(input){
temp <- as.numeric(substr(input, 1, 1))
temp.table <- as.data.frame(table(temp))
freq <- temp.table$Freq/sum(temp.table$Freq)
out <- numeric()
for(j in 1:length(levels(temp.table$temp))){
for(i in 1:9){
if(as.numeric(levels(temp.table$temp)[j])==i){
out[i] <- freq[j] - log10(1+1/i)
}
}
}
return((out))
}
method(input)
max(method(input))
input <- c(rnorm(100, 80, 10))
method <- function(input){
temp <- as.numeric(substr(input, 1, 1))
temp.table <- as.data.frame(table(temp))
freq <- temp.table$Freq/sum(temp.table$Freq)
out <- numeric()
for(j in 1:length(levels(temp.table$temp))){
for(i in 1:9){
if(as.numeric(levels(temp.table$temp)[j])==i){
out[i] <- freq[j] - log10(1+1/i)
}
}
}
return((out))
}
max(method(input))
input <- c(rnorm(100, 80, 10))
method <- function(input){
temp <- as.numeric(substr(input, 1, 1))
temp.table <- as.data.frame(table(temp))
freq <- temp.table$Freq/sum(temp.table$Freq)
out <- numeric()
for(j in 1:length(levels(temp.table$temp))){
for(i in 1:9){
if(as.numeric(levels(temp.table$temp)[j])==i){
out[i] <- freq[j] - log10(1+1/i)
}
}
}
return((out))
}
(method(input))
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
rm()
rm(Election08)
rm(newhamp)
rm(USJudgeRatings)
View(Expends2002)
mydata=Expends2002
is.data.frame(mydata)
#2)
colnames(mydata)[3]="Useless"
View(mydata)
#3)
mydata$Useless=NULL
mydata$Source=NULL
#4)
mydata$EntType=factor(mydata$EntType) #7 levels
is.factor(mydata$EntType)
#5)
mydata$State=factor(mydata$State)
levels(mydata$State) # ("AS", "LL", "St", "ZZ")
## ZZ is Virginia, St is Florida, LL is Iowa, AS is Arizona (2 are American Samoa)
mydata$State[mydata$State=="ZZ"]<-"VI"
mydata$State[mydata$State=="AS" & mydata$Zip==853640574]<-"AZ"
mydata$State[mydata$State=="LL"]<-"IA"
mydata$State[mydata$State=="St"]<-"FL"
#6)
clean_data<-mydata[!is.na(mydata$State),]
View(clean_data)
#7)
is.numeric(mydata$Zip)
mydata$Zip=as.numeric(mydata$Zip) #missing data stored as NA
mean(mydata$Zip, na.rm=TRUE) #48210047
#8)
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
# check through each sub-sbring in b, changes Expends2002$CommsInDescrip[i] to TRUE if any sub-string in b[i]
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
b[[i]][which(b[[i]]=="")] <- NA
Expends2002$Descrip[1]
b[[1]][2]
#b)
mydata$Filerid=substr(mydata$CRPFilerid, start=2, stop=9)
as.factor(mydata$Filerid) #2246 levels
#c)
mydata$Zip_four=substr(mydata$Zip, start=1, stop=4)
max(table(mydata$Zip_four)) #2000 is the most common (1561 occurences)
#d)
as.character(mydata$Descrip)
mydata$boolean = grepl("Communications|communications|COMMUNICATIONS", mydata$Descrip)
table(mydata$boolean) #9 TRUE values
#e)
mydata$new_variable<-substr(mydata$CRPFilerid, 1, 1) == "N" | (mydata$Amount>500 & !is.na(mydata$Descrip))
table(mydata$new_variable) # 12456 TRUE values
Expends2002 <- read_csv("~/Downloads/Expends2002.txt")
View(Expends2002)
mydata=Expends2002
is.data.frame(mydata)
#2)
colnames(mydata)[3]="Useless"
View(mydata)
#3)
mydata$Useless=NULL
mydata$Source=NULL
#4)
mydata$EntType=factor(mydata$EntType) #7 levels
is.factor(mydata$EntType)
#5)
mydata$State=factor(mydata$State)
levels(mydata$State) # ("AS", "LL", "St", "ZZ")
## ZZ is Virginia, St is Florida, LL is Iowa, AS is Arizona (2 are American Samoa)
mydata$State[mydata$State=="ZZ"]<-"VI"
mydata$State[mydata$State=="AS" & mydata$Zip==853640574]<-"AZ"
mydata$State[mydata$State=="LL"]<-"IA"
mydata$State[mydata$State=="St"]<-"FL"
#6)
clean_data<-mydata[!is.na(mydata$State),]
View(clean_data)
#7)
is.numeric(mydata$Zip)
mydata$Zip=as.numeric(mydata$Zip) #missing data stored as NA
mean(mydata$Zip, na.rm=TRUE) #48210047
#8)
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
# check through each sub-sbring in b, changes Expends2002$CommsInDescrip[i] to TRUE if any sub-string in b[i]
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
b[[i]][which(b[[i]]=="")] <- NA
Expends2002$Descrip[1]
b[[1]][2]
#b)
mydata$Filerid=substr(mydata$CRPFilerid, start=2, stop=9)
as.factor(mydata$Filerid) #2246 levels
#c)
mydata$Zip_four=substr(mydata$Zip, start=1, stop=4)
max(table(mydata$Zip_four)) #2000 is the most common (1561 occurences)
#d)
as.character(mydata$Descrip)
mydata$boolean = grepl("Communications|communications|COMMUNICATIONS", mydata$Descrip)
table(mydata$boolean) #9 TRUE values
#e)
mydata$new_variable<-substr(mydata$CRPFilerid, 1, 1) == "N" | (mydata$Amount>500 & !is.na(mydata$Descrip))
table(mydata$new_variable) # 12456 TRUE values
library(readr)
Expends2002 <- read_csv("~/Downloads/Expends2002.txt")
View(Expends2002)
mydata=Expends2002
is.data.frame(mydata)
colnames(mydata)[3]="Useless"
View(mydata)
#3)
mydata$Useless=NULL
mydata$Source=NULL
#4)
mydata$EntType=factor(mydata$EntType) #7 levels
is.factor(mydata$EntType)
#5)
mydata$State=factor(mydata$State)
levels(mydata$State) # ("AS", "LL", "St", "ZZ")
## ZZ is Virginia, St is Florida, LL is Iowa, AS is Arizona (2 are American Samoa)
mydata$State[mydata$State=="ZZ"]<-"VI"
mydata$State[mydata$State=="AS" & mydata$Zip==853640574]<-"AZ"
mydata$State[mydata$State=="LL"]<-"IA"
mydata$State[mydata$State=="St"]<-"FL"
#6)
clean_data<-mydata[!is.na(mydata$State),]
View(clean_data)
#7)
is.numeric(mydata$Zip)
mydata$Zip=as.numeric(mydata$Zip) #missing data stored as NA
mean(mydata$Zip, na.rm=TRUE) #48210047
#8)
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
# check through each sub-sbring in b, changes Expends2002$CommsInDescrip[i] to TRUE if any sub-string in b[i]
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
b[[i]][which(b[[i]]=="")] <- NA
Expends2002$Descrip[1]
b[[1]][2]
#b)
mydata$Filerid=substr(mydata$CRPFilerid, start=2, stop=9)
as.factor(mydata$Filerid) #2246 levels
#c)
mydata$Zip_four=substr(mydata$Zip, start=1, stop=4)
max(table(mydata$Zip_four)) #2000 is the most common (1561 occurences)
#d)
as.character(mydata$Descrip)
mydata$boolean = grepl("Communications|communications|COMMUNICATIONS", mydata$Descrip)
table(mydata$boolean) #9 TRUE values
#e)
mydata$new_variable<-substr(mydata$CRPFilerid, 1, 1) == "N" | (mydata$Amount>500 & !is.na(mydata$Descrip))
table(mydata$new_variable) # 12456 TRUE values
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('  ', '', Expends2002$Descrip)
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', ' ', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub(' ', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('  ', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', ' ', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('  ', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', ' ', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$Descrip)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$ID)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
mydata$word.length[i]<-length(b[[i]])
}
}
View(mydata)
Expends2002$Descrip <- gsub('[[:digit:+]]', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('-', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('&', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('$', '', Expends2002$Descrip)
Expends2002$Descrip <- gsub('[()]', '', Expends2002$Descrip)
Expends2002$Descrip <- trimws(Expends2002$Descrip, which="both")
a<-as.character(Expends2002$Descrip)  # change the variable Descrip to a chracter
b<-strsplit(a," ")  # splits a into seperate strings at places where there is a space
for (i in 1:length(Expends2002$ID)){
for (n in 1:length(b[[i]])){
b[[i]][which(b[[i]]=="")] <- NA
Expends2002$word.length[i]<-length(b[[i]])
}
}
View(Expends2002)
install.packages("doMC")
library(doMC)
library(devtools)
library(roxygen2)
current.code<-as.package("easyRasch")
load_all(current.code)
document(current.code)
setwd("/Users/kalendavison/Desktop/Applied Statistical Programming/GitHub/Poli-Sci-5625-Midterm/Master") #directory above package
current.code<-as.package("easyRasch")
load_all(current.code)
document(current.code)
?Likelihood
?Probability
testSubject = new("Rasch", name = "Benny", difficulty = sample(c(.2, .4, 1.7, 1.3, 1.6, 1.6, 5.6), 10, replace = TRUE), answers = sample(0:1, 10, replace=TRUE))
Probability(raschObj = testSubject, theta = 2)
Likelihood(testSubject, .28)
Prior(theta = 1)
EAP(testSubject)
EAP(testSubject)
EAP(testSubject)
setGeneric("EAP", #create a generic in S4
function(raschObj = "Rasch", lower = "numeric", upper = "numeric") {
standardGeneric("EAP")
} )
setMethod(f = "EAP", signature = c("Rasch", "numeric", "numeric"),
definition = function(raschObj, lower = 6, upper = 6){
num = function(raschObj, theta){ #create the function in the numerator
n = theta * Likelihood(raschObj, theta) * Prior(theta)
return(num)
}
denom = function(raschObj, theta){ #create the function in the denominator
d = Likelihood(raschObj, theta) * Prior(theta)
return(denom)
}
#integrate numerator over theta passing through raschObj
numerator = integrate(num, lower = lower, upper = upper, raschObj, stop.on.error = FALSE)
#integrate denominator over theta passing through raschObj
denominator = integrate(denom, lower = lower, upper = upper, raschObj, stop.on.error = FALSE)
ability_estimate = numerator/denominator #divide to get final estimate
return(ability_estimate)
}
)
setGeneric("EAP", #create a generic in S4
function(raschObj = "Rasch", lower = "numeric", upper = "numeric") {
standardGeneric("EAP")
} )
setMethod(f = "EAP", signature = c("Rasch", "numeric", "numeric"),
definition = function(raschObj, lower = 6, upper = 6){
num = function(raschObj, theta){ #create the function in the numerator
n = theta * Likelihood(raschObj, theta) * Prior(theta)
return(num)
}
denom = function(raschObj, theta){ #create the function in the denominator
d = Likelihood(raschObj, theta) * Prior(theta)
return(denom)
}
#integrate numerator over theta passing through raschObj
numerator = integrate(num, lower = lower, upper = upper, raschObj, stop.on.error = FALSE)
#integrate denominator over theta passing through raschObj
denominator = integrate(denom, lower = lower, upper = upper, raschObj, stop.on.error = FALSE)
ability_estimate = numerator/denominator #divide to get final estimate
return(ability_estimate)
}
)
EAP(testSubject)
print(testSubject, 6, 6)
print(testSubject, 6, 6)
setGeneric("EAP", #create a generic in S4
function(raschObj = "Rasch", lower = "numeric", upper = "numeric") {
standardGeneric("EAP")
} )
setMethod(f = "EAP", signature = ("Rasch"),
definition = function(raschObj, lower = 6, upper = 6){
num = function(raschObj, theta){ #create the function in the numerator
n = theta * Likelihood(raschObj, theta) * Prior(theta)
return(num)
}
denom = function(raschObj, theta){ #create the function in the denominator
d = Likelihood(raschObj, theta) * Prior(theta)
return(denom)
}
#integrate numerator over theta passing through raschObj
numerator = integrate(num, lower = lower, upper = upper, raschObj, stop.on.error = FALSE)
#integrate denominator over theta passing through raschObj
denominator = integrate(denom, lower = lower, upper = upper, raschObj, stop.on.error = FALSE)
ability_estimate = numerator/denominator #divide to get final estimate
return(ability_estimate)
}
)
print(testSubject, 6, 6)
print(testSubject)
